#!/bin/sh
  
## "#" 號之後的內容為註解, 執行時不會有作用 

## 以下為防火牆的設定, 關於所有變數的詳細說明, 請參考 3-3 節與本節前面的說明

# 設定禁止連線的 IP, 可使用空白分隔多個 IP, 也可以使用網段的寫法
BADIPS=""

# 設定不可能出現的私有 IP, 請依照您的環境自行刪減網段
IMPOSSIBLE_IPS="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

# 允許對內連線的 TCP 通訊埠
IN_TCP_PORTALLOWED="ssh,192.168.0.1 ssh,192.168.0.1 smtp http https mysql ftp,192.168.0.1 ftp,192.168.0.1"

# 允許對內連線的 UDP 通訊埠
IN_UDP_PORTALLOWED=""

# 允許對內連線的 ICMP 類型
IN_ICMP_ALLOWED=""

# 是否採用雙向管制, 限制由內向外的連線。若設定為 "0" 表示不管制, 
# 設定為 "1" 則管制對外連線
EGRESS="0"

# 當採用雙向管制時, 允許對外連線的 TCP 通訊埠
OUT_TCP_PORTALLOWED="smtp,,root"

# 當採用雙向管制時, 允許對外連線的 UDP 通訊埠
OUT_UDP_PORTALLOWED=""

# 當採用雙向管制時, 允許對外連線的 ICMP 類型
OUT_ICMP_ALLOWED=""

# 是否記錄所有 iptables 丟棄的封包
DROPLOG="0"

# 是否要下載 DShield.org 的黑名單, 針對名單上的網段進行封鎖
DSHIELD="0"

## 以下為指令稿的運作程式碼, 如果對於 shell script 不太熟悉, 建議您不要隨意更動

# 載入相關的核心模組
modprobe ip_tables
modprobe ip_conntrack
modprobe ip_conntrack_ftp
modprobe ip_conntrack_irc

# 清除目前 iptables 所有表格內的規則
echo -n "Initiating iptables..."
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -t filter -F
iptables -t nat -F
iptables -t filter -X
iptables -t nat -X
echo "ok"

# 如果 $DSHIELD 變數內的值為 "1", 則下載 Dshield.org 的黑名單, 
# 針對名單上的網段進行封鎖
if [ "$DSHIELD" = "1" ]; then
   echo -n "Getting the DShield Block List..."
   BADIPS="$BADIPS
      `lynx --dump http://feeds.dshield.org/block.txt | \
      awk '/^[1-9]/ {print $1 "/" $3}'`"
   echo "ok"
fi

# 若執行者加上 "start" 參數, 則將 $skiptest 變數設定為 "1", 
# 如此將跳過測試模式, 設定所有規則後不再清除
[ "$1" = "start" ] && skiptest="1"

## 設定核心的安全相關參數
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects
echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
echo 1 > /proc/sys/net/ipv4/tcp_syncookies
echo 3 > /proc/sys/net/ipv4/tcp_retries1
echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout
echo 1400 > /proc/sys/net/ipv4/tcp_keepalive_time
echo 0 > /proc/sys/net/ipv4/tcp_window_scaling
echo 0 > /proc/sys/net/ipv4/tcp_sack
echo 0 > /proc/sys/net/ipv4/tcp_timestamps

## 以下開始設定防火牆規則

echo -n "Setting rules..." 

# 設定 INPUT、OUTPUT、FORWARD 鏈預設的過濾原則, 凡封包
# 不符合各鏈中的規則, 皆予以拋棄
iptables -P INPUT DROP 
iptables -P OUTPUT DROP
iptables -P FORWARD DROP

# 允許流經 lookback 介面的封包進出 (詳細說明可參考 3-2-3 節)
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT
iptables -A INPUT ! -i lo -s 127.0.0.0/8 -j DROP
iptables -A OUTPUT ! -o lo -d 127.0.0.0/8 -j DROP

# 新增一個名為 BADPKT 的新鏈 (詳細說明可參考 3-2-4 節)
iptables -N BADPKT
# 若 DROPLOG 變數值為 "1", 則記錄所有進入 BADPKT 鏈的封包
if [ "$DROPLOG" = "1" ]; then
   iptables -A BADPKT -j LOG --log-prefix "** Firewall BADPKT **"
fi
# 丟棄所有進入 BADPKT 鏈的封包
iptables -A BADPKT -j DROP

# 將可疑封包交由 BADPKT 鏈處理 (詳細說明可參考 3-9 頁)
iptables -A INPUT -m state --state INVALID -j BADPKT
iptables -A INPUT ! -p tcp --syn -m state --state NEW -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL NONE -j BADPKT
iptables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j BADPKT
iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j BADPKT
iptables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,URG URG -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL ALL -j BADPKT
iptables -A INPUT -p tcp --tcp-flags ALL FIN -j BADPKT

# 允許目的埠號為 53 的 UDP 封包出去, 才能對外查詢 DNS 
# (詳細說明可參考 3-14 頁)
iptables -A OUTPUT -p udp -m state --state NEW --dport 53 -j ACCEPT
iptables -A OUTPUT -p udp -m state --state NEW --dport 1980 -j ACCEPT

# 允許已建立連線和回應的封包通過 (詳細說明可參考 3-12 頁)
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

## 阻擋特定 IP 的連線

# 新增一個名為 BADIP 的新鏈
iptables -N BADIP
# 若 DROPLOG 變數值為 "1", 則記錄所有進入 BADIP 鏈的封包
if [ "$DROPLOG" = "1" ]; then
   iptables -A BADIP -j LOG --log-prefix "** Firewall BADIP **"
fi
# 丟棄所有進入 BADIP 鏈的封包
iptables -A BADIP -j DROP

# 阻擋特定 IP 的連線 (詳細說明可參考 3-2-5 節)
for ip in $BADIPS $IMPOSSIBLE_IPS ; do
   iptables -A INPUT -s $ip -j BADIP
done

# 允許特定 TCP 埠號的對內新連線 (詳細說明可參考 3-2-6 節)
for i in $IN_TCP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"

   iptables -A INPUT -p tcp $ipt_option --dport $port \
         --syn -m state --state NEW -j ACCEPT
done

# 允許特定 UDP 埠號的對內新連線 (詳細說明可參考 3-13 頁)
for i in $IN_UDP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"

   iptables -A INPUT -p udp $ipt_option --dport $port \
         -m state --state NEW -j ACCEPT
done

# 允許特定 ICMP 類型封包進入 (詳細說明可參考 3-13 頁)
for i in $IN_ICMP_ALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   type="$1"
   [ -n "$2" ] && ipt_option="-s `echo $2 | sed 's/^!/! /'`"
   
   iptables -A INPUT -p icmp $ipt_option --icmp-type $type \
      -m state --state NEW -j ACCEPT
done

# 若 EGRESS 變數的值為 "1", 則管制對外的連線 (詳細說明可參考 3-2-7 節)
if [ $EGRESS = "1" ]; then

# 允許特定 TCP 埠號的對外新連線 (詳細說明可參考 3-2-7 節)
for i in $OUT_TCP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   port="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p tcp $ipt_option --dport $port \
         --syn -m state --state NEW -j ACCEPT
done

# 允許特定 UDP 埠號的對外新連線 (詳細說明可參考 3-14, 3-15 頁)
for i in $OUT_UDP_PORTALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option
   
   port="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p udp $ipt_option --dport $port \
         -m state --state NEW -j ACCEPT
done

# 允許特定 ICMP 類型封包送出
for i in $OUT_ICMP_ALLOWED ; do
   IFS=','
   set $i
   unset IFS ipt_option

   type="$1"
   [ -n "$2" ] && ipt_option="-d `echo $2 | sed 's/^!/! /'`"
   [ -n "$3" ] && ipt_option="$ipt_option -m owner \
      `echo $3 | sed 's/\([^!]\)/ --uid-owner \1/'`"

   iptables -A OUTPUT -p icmp $ipt_option --icmp-type $type \
      -m state --state NEW -j ACCEPT
done
fi

# 若 EGRESS 變數的值不為 "1", 表示不管制對外連線, 所以
# 開放所有對外連線 (詳細說明可參考 3-13 頁)
if [ ! "$EGRESS" = "1" ]; then
   iptables -A OUTPUT -m state --state NEW -j ACCEPT
fi

# 若 DROPLOG 的變數值為 "1", 則將所有丟棄的封包記錄下來 
# (詳細說明可參考 3-2-8 節)
if [ "$DROPLOG" = "1" ]; then
   iptables -A INPUT -j LOG --log-prefix "** Firewall DROP **"
   iptables -A OUTPUT -j LOG --log-prefix "** Firewall DROP **"
   iptables -A FORWARD -j LOG --log-prefix "** Firewall DROP **"
fi

echo "done"

# 如果 $skiptest 變數的值不為 "1", 也就是執行者沒有使用 "start" 參數, 則 
# 7 秒後自動清除 iptables 的規則, 可避免遠端操作者將自己阻擋在防火牆外

if [ "$skiptest" = "1" ]; then exit ;fi

echo -e "\n     TEST MODE"
echo -n "All chains will be cleaned after 7 sec."
i=1; while [ "$i" -le "7" ]; do
   echo -n "."
   i=`expr $i + 1`
   sleep 1
done
echo -en "\nFlushing ruleset..."
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -t filter -F
iptables -t nat -F
iptables -t filter -X
iptables -t nat -X
echo "ok"
